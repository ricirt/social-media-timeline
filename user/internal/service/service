package service

import (
	"context"
	"errors"

	"your_project/repository"
)

// UserService defines the interface for user service
type UserService interface {
	CreateUser(ctx context.Context, user *repository.User) error
	GetUserByID(ctx context.Context, id string) (*repository.User, error)
	UpdateUser(ctx context.Context, user *repository.User) error
	DeleteUser(ctx context.Context, id string) error
}

// userService implements UserService interface
type userService struct {
	repo repository.UserRepository
}

// NewUserService creates a new UserService
func NewUserService(repo repository.UserRepository) UserService {
	return &userService{repo: repo}
}

// CreateUser creates a new user
func (s *userService) CreateUser(ctx context.Context, user *repository.User) error {
	if user.Name == "" || user.Email == "" {
		return errors.New("name and email are required")
	}
	return s.repo.CreateUser(ctx, user)
}

// GetUserByID retrieves a user by ID
func (s *userService) GetUserByID(ctx context.Context, id string) (*repository.User, error) {
	if id == "" {
		return nil, errors.New("id is required")
	}
	return s.repo.GetUserByID(ctx, id)
}

// UpdateUser updates an existing user
func (s *userService) UpdateUser(ctx context.Context, user *repository.User) error {
	if user.ID == "" {
		return errors.New("id is required")
	}
	return s.repo.UpdateUser(ctx, user)
}

// DeleteUser deletes a user by ID
func (s *userService) DeleteUser(ctx context.Context, id string) error {
	if id == "" {
		return errors.New("id is required")
	}
	return s.repo.DeleteUser(ctx, id)
}
